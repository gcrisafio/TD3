ARM GAS  src/startup.s 			page 1


   1              	/**
   2              	 * Archivo: startup.S
   3              	 * Función: Realiza la inicialización básica del uP
   4              	 * Autor: Gabriel Crisafio
   5              	 **/
   6              	
   7              	/* Referencias a funciones externas */
   8              	
   9              	.extern UND_Handler
  10              	.extern SVC_Handler
  11              	.extern PREF_Handler
  12              	.extern ABT_Handler
  13              	.extern IRQ_Handler
  14              	.extern FIQ_Handler
  15              	
  16              	.global _start
  17              	.extern __gic_init
  18              	
  19              	/* Referencia a variables o simbolos externos */
  20              	.extern _ISR_VECTORS_BASE
  21              	.extern __isr_table_start__
  22              	
  23              	.extern _reset_vector
  24              	.extern __bss_start
  25              	.extern __bss_end
  26              	
  27              	
  28              	.extern __irq_stack_top__
  29              	.extern __fiq_stack_top__ 
  30              	.extern __svc_stack_top__
  31              	.extern __abt_stack_top__
  32              	.extern __und_stack_top__    
  33              	.extern __sys_stack_top__ 
  34              	
  35              	
  36              	/* Tamaños en Public RAM */
  37              	.equ _PUB_RAM_SYS_STACK_SIZE, 256
  38              	.equ _PUB_RAM_IRQ_STACK_SIZE, 256
  39              	.equ _PUB_RAM_FIQ_STACK_SIZE, 8
  40              	.equ _PUB_RAM_SVC_STACK_SIZE, 8
  41              	.equ _PUB_RAM_ABT_STACK_SIZE, 8
  42              	.equ _PUB_RAM_UND_STACK_SIZE, 8
  43              	
  44              	/* 
  45              	 Definimos bits del CPSR para los diferentes modos
  46              	   
  47              	 CPSR: Current Program Status Register - Ver ARM B1
  48              	 El SPSR posee la misma estructura que el CPSR, solo que se refiere al
  49              	 "Saved Program Status Register".
  50              	 */
  51              	
  52              	.equ USR_MODE, 0x10    /* USER       - Encoding segun ARM B1.3.1 (pag. B1-1139): 10000 - Bits 4:0 d
  53              	.equ FIQ_MODE, 0x11    /* FIQ        - Encoding segun ARM B1.3.1 (pag. B1-1139): 10001 - Bits 4:0 d
  54              	.equ IRQ_MODE, 0x12    /* IRQ        - Encoding segun ARM B1.3.1 (pag. B1-1139): 10010 - Bits 4:0 d
  55              	.equ SVC_MODE, 0x13    /* Supervisor - Encoding segun ARM B1.3.1 (pag. B1-1139): 10011 - Bits 4:0 d
  56              	.equ ABT_MODE, 0x17    /* Abort      - Encoding segun ARM B1.3.1 (pag. B1-1139): 10111 - Bits 4:0 d
  57              	.equ UND_MODE, 0x1B    /* Undefined  - Encoding segun ARM B1.3.1 (pag. B1-1139): 11011 - Bits 4:0 d
ARM GAS  src/startup.s 			page 2


  58              	.equ SYS_MODE, 0x1F    /* System     - Encoding segun ARM B1.3.1 (pag. B1-1139): 11111 - Bits 4:0 d
  59              	.equ I_BIT,    0x80    /* Mask bit I - Encoding segun ARM B1.3.3 (pag. B1-1149) - Bit 7 del CPSR */
  60              	.equ F_BIT,    0x40    /* Mask bit F - Encoding segun ARM B1.3.3 (pag. B1-1149) - Bit 6 del CPSR */
  61              	
  62              	/* Modo de funcionamiento: arm */
  63              	.code 32
  64              	
  65              	/* Hasta este momento, no hay nada inicializado */
  66              	.section .text_start_code
  67              	_table_start: /* Inicio de table_vector */
  68 0000 18F09FE5 	    LDR PC, addr__reset_vector
  69 0004 18F09FE5 	    LDR PC, addr_UND_Handler
  70 0008 18F09FE5 	    LDR PC, addr_SVC_Handler
  71 000c 18F09FE5 	    LDR PC, addr_PREF_Handler
  72 0010 18F09FE5 	    LDR PC, addr_ABT_Handler
  73 0014 18F09FE5 	    LDR PC, addr_start
  74 0018 18F09FE5 	    LDR PC, addr_IRQ_Handler
  75 001c 18F09FE5 	    LDR PC, addr_FIQ_Handler
  76              	
  77 0020 00000000 	addr__reset_vector:  .word _reset_vector
  78 0024 00000000 	addr_UND_Handler  :  .word UND_Handler  
  79 0028 00000000 	addr_SVC_Handler  :  .word SVC_Handler  
  80 002c 00000000 	addr_PREF_Handler :  .word PREF_Handler 
  81 0030 00000000 	addr_ABT_Handler  :  .word ABT_Handler  
  82 0034 00000000 	addr_start        :  .word _start        
  83 0038 00000000 	addr_IRQ_Handler  :  .word IRQ_Handler  
  84 003c 00000000 	addr_FIQ_Handler  :  .word FIQ_Handler  
  85              	
  86              	_start:
  87              	
  88              	/* Limpiamos la sección BSS - Sugerido por Starterware */
  89              	_clear_BSS:
  90 0040 8C009FE5 	    LDR R0, =__bss_start__      /* Dirección de inicio de la sección BSS (pública) */
  91 0044 8C109FE5 	    LDR R1, =__bss_end__        /* Dirección final de la sección BSS (pública) */
  92 0048 0020A0E3 	    MOV R2, #0                  /* Copiamos el valor "0" en R2 */
  93 004c 010050E1 	    CMP R0,R1
  94 0050 0200000A 	    BEQ _TABLE_COPY             /* Para el caso particular en el que bss está vacía (__bss_start_
  95              	_LOOP:
  96 0054 042080E4 	    STR R2, [R0], #4            /* El contenido de R2 es cargado en "lo apuntado" por R0, luego inc
  97 0058 010050E1 	    CMP R0, R1                  /* Comparamos R0 y R1, que poseen las direcciones de interés */
  98 005c FCFFFFDA 	    BLE _LOOP                   /* Mientras la comparación anterior sea falsa, se vuelve a _LOOP *
  99              	
 100              	
 101              	_TABLE_COPY:
 102 0060 0000A0E3 	    MOV R0, #0
 103 0064 70109FE5 	    LDR R1, = _table_start
 104 0068 70209FE5 	    LDR R2, = _start
 105              	
 106              	_TABLE_LOOP:
 107 006c 043091E4 	    LDR R3, [ R1 ], #4
 108 0070 043080E4 	    STR R3, [ R0 ], #4
 109              	
 110 0074 020051E1 	    CMP R1, R2
 111 0078 FBFFFF1A 	    BNE _TABLE_LOOP
 112              	
 113              	
 114              	_STACK_INIT:
ARM GAS  src/startup.s 			page 3


 115              	    /* Inicializamos los stack pointers para los diferentes modos de funcionamiento */
 116 007c D2F021E3 	    MSR cpsr_c,#(IRQ_MODE | I_BIT |F_BIT)
 117 0080 5CD09FE5 	    LDR SP,=__irq_stack_top__     /* IRQ stack pointer */
 118              	
 119 0084 D1F021E3 	    MSR cpsr_c,#(FIQ_MODE | I_BIT |F_BIT)
 120 0088 58D09FE5 	    LDR SP,=__fiq_stack_top__     /* FIQ stack pointer */
 121              	
 122 008c D3F021E3 	    MSR cpsr_c,#(SVC_MODE | I_BIT |F_BIT)
 123 0090 54D09FE5 	    LDR SP,=__svc_stack_top__     /* SVC stack pointer */
 124              	
 125 0094 D7F021E3 	    MSR cpsr_c,#(ABT_MODE | I_BIT |F_BIT)
 126 0098 50D09FE5 	    LDR SP,=__abt_stack_top__     /* ABT stack pointer */
 127              	
 128 009c DBF021E3 	    MSR cpsr_c,#(UND_MODE | I_BIT |F_BIT)
 129 00a0 4CD09FE5 	    LDR SP,=__und_stack_top__     /* UND stack pointer */
 130              	
 131 00a4 DFF021E3 	    MSR cpsr_c,#(SYS_MODE | I_BIT |F_BIT)
 132 00a8 48D09FE5 	    LDR SP,=__sys_stack_top__     /* SYS stack pointer */
 133              	
 134 00ac FEFFFFEB 	    BL gic_init
 135 00b0 FEFFFFEB 	    BL timer_init
 136              	
 137              	prueba_SVC_Handler: //NOTA cuando el procesador entra a un Handler de Excepcion se guarda CPSR --> 
 138 00b4 5F0000EF 	    SWI 95
 139              	
 140              	    /* Habilitacion de IRQ en registro CPSR */
 141 00b8 00000FE1 	    MRS R0, cpsr
 142 00bc 8000C0E3 	    BIC R0, R0, #0x80 
 143 00c0 00F021E1 	    MSR cpsr_c, R0 // Habilita IRQ
 144              	
 145 00c4 5F0000EF 	    SWI 95
 146 00c8 5F0000EF 	    SWI 95
 147 00cc 5F0000EF 	    SWI 95
 148              	
 149              	idle:
 150 00d0 03F020E3 	    WFI
 151              	
 152 00d4 00000000 	.end
 152      00000000 
 152      00000000 
 152      00000000 
 152      00000000 
