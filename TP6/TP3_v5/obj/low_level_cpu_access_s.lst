ARM GAS  src/low_level_cpu_access.s 			page 1


   1              	/**
   2              	 * Archivo: low_level_cpu_access.S
   3              	 * Función: funciones de bajo nivel de acceso al control del CPU
   4              	 * Autores: Peccia - Ferreyro
   5              	 **/
   6              	
   7              	 
   8              	
   9              	.global _irq_enable
  10              	.global _irq_disable
  11              	.global _MMU_Enable
  12              	.global _MMU_Disablez
  13              	.global _LOAD_ISR_Vectors_Base
  14              	.global _WRITE_8
  15              	.global _WRITE_16
  16              	.global _WRITE_32
  17              	.global _READ_8
  18              	.global _READ_16
  19              	.global _READ_32
  20              	.global _HALT_CPU
  21              	.global _READ_CPSR_REGS
  22              	.global _EOI
  23              	
  24              	
  25              	.section .text_pub
  26              	/*
  27              	 Habilita interrupciones
  28              	 */
  29              	.align 4             // Alineado a 4 Bytes
  30              	_irq_enable:
  31 0000 4FF07FF5 	    DSB
  32 0004 00000FE1 	    MRS R0, CPSR
  33 0008 8000C0E3 	    BIC R0, #0x80
  34 000c 00F029E1 	    MSR CPSR, R0
  35 0010 4FF07FF5 	    DSB
  36 0014 6FF07FF5 	    ISB
  37 0018 1EFF2FE1 	    BX LR
  38              	
  39              	/*
  40              	 Deshabilita interrupciones
  41              	 */
  42 001c 00000000 	.align 4             // Alineado a 4 Bytes
  43              	_irq_disable:
  44 0020 4FF07FF5 	    DSB
  45 0024 00000FE1 	    MRS R0, CPSR
  46 0028 400080E3 	    ORR R0, #0x40
  47 002c 00F029E1 	    MSR CPSR, R0
  48 0030 4FF07FF5 	    DSB
  49 0034 6FF07FF5 	    ISB
  50 0038 1EFF2FE1 	    BX LR
  51              	
  52              	/*
  53              	    Carga la dirección base en la Public RAM de
  54              	    la tabla de ISR
  55              	 */
  56              	_LOAD_ISR_Vectors_Base:
  57 003c 100F0CEE 	    MCR     P15, #0, R0, C12, C0, #0
ARM GAS  src/low_level_cpu_access.s 			page 2


  58 0040 4FF07FF5 	    DSB
  59 0044 1EFF2FE1 	    BX      LR
  60              	
  61              	
  62              	/*
  63              	    Realiza una suspensión del uP esperando por un evento
  64              	    de interrupción para salir de ese estado. Es como la instrucción
  65              	    HLT de Intel X86.
  66              	 */
  67 0048 00000000 	.align 4             // Alineado a 4 Bytes
  67      00000000 
  68              	_HALT_CPU:
  69 0050 03F020E3 	    WFI
  70 0054 1EFF2FE1 	    BX LR
  71              	
  72              	/*
  73              	    Utilizamos la instrucción WFE (Wait for Event) para generarnos 
  74              	    un "Magic Breakpoint" propio y poder debuggear el código
  75              	 */
  76 0058 00000000 	.align 4             // Alineado a 4 Bytes
  76      00000000 
  77              	_BREAKPOINT_DEBUG:
  78 0060 02F020E3 	    WFE
  79 0064 1EFF2FE1 	    BX LR
  80              	
  81 0068 00000000 	.align 4             // Alineado a 4 Bytes
  81      00000000 
  82              	_READ_CPSR_REGS:
  83 0070 4FF07FF5 	    DSB
  84 0074 00000FE1 	    MRS R0, CPSR
  85 0078 1EFF2FE1 	    BX LR
  86              	
  87 007c 00000000 	.align 4             // Alineado a 4 Bytes
  88              	_EOI:
  89 0080 0100A0E3 	    MOV r0,#0x1
  90 0084 34109FE5 	    LDR r1,=0x48200000
  91 0088 480081E5 	    STR r0, [r1, #0x48]
  92              	
  93 008c 1EFF2FE1 	    BX LR
  94              	/*
  95              	    Funciones de escritura y lecutra de 8, 16 y 32 bits
  96              	    Para las funciones _WRITE_X, desde C es: _WRITE_X(DIRECCION, VALOR) 
  97              	 */
  98              	.align 4             // Alineado a 4 Bytes
  99              	_WRITE_8:
 100 0090 0010C0E5 	    STRB R1, [R0]       // STR Byte el contenido de R0 en la posición R1
 101 0094 1EFF2FE1 	    BX LR
 102              	
 103              	_WRITE_16:
 104 0098 B010C0E1 	    STRH R1, [R0]       // STR HalfWord el contenido de R0 en la posición R1
 105 009c 1EFF2FE1 	    BX LR
 106              	
 107              	_WRITE_32:
 108 00a0 001080E5 	    STR R1, [R0]       // STR Word el contenido de R0 en la posición R1
 109 00a4 1EFF2FE1 	    BX LR
 110              	
 111              	_READ_8:
ARM GAS  src/low_level_cpu_access.s 			page 3


 112 00a8 0000D0E5 	    LDRB R0, [R0]
 113 00ac 1EFF2FE1 	    BX LR
 114              	
 115              	_READ_16:
 116 00b0 B000D0E1 	    LDRH R0, [R0]
 117 00b4 1EFF2FE1 	    BX LR
 118              	
 119              	_READ_32:
 120 00b8 000090E5 	    LDR R0, [R0]
 121 00bc 1EFF2FE1 	    BX LR
 121      00002048 
