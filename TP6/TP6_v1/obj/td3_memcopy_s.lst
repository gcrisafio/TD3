ARM GAS  src/td3_memcopy.s 			page 1


   1              	.global my_string
   2              	.global _Copia_ROM_a_RAM
   3              	
   4              	.extern _PUBLIC_LMA_SECTION_INICIO
   5              	.extern _PUBLIC_VMA_SECTION_INICIO
   6              	.extern _PUBLIC_LMA_SECTION_TEXT
   7              	.extern _PUBLIC_VMA_SECTION_TEXT
   8              	.extern _PUBLIC_LMA_SECTION_DATA
   9              	.extern _PUBLIC_VMA_SECTION_DATA
  10              	.extern _ROM_ORIGEN
  11              	
  12              	.extern _PUBLIC_SIZE_INICIO
  13              	.extern _PUBLIC_SIZE_TEXT
  14              	.extern _PUBLIC_SIZE_DATA
  15              	
  16              	.extern td3_memcopy
  17              	.extern _start
  18              	
  19              	.section .inicio
  20              	
  21              	_Copia_ROM_a_RAM: 
  22              	
  23              	.arm
  24              	
  25              	_Inicializar_Stack:
  26 0000 20D09FE5 	      LDR R13, =fin_pila      // Inicializar puntero SP de pila. 
  27              	
  28              	_Copia_Seccion_TEXT:
  29              	      // Copiamos .text (codigo) de LMA a VMA
  30 0004 20009FE5 	      LDR R0, =_PUBLIC_RAM_INIT    // Destino
  31 0008 20109FE5 	      LDR R1, =_SECTION_TEXT_LMA   // Origen
  32 000c 20209FE5 	      LDR R2, =_PUBLIC_SIZE_TEXT   // Cantidad de bytes 
  33 0010 FEFFFFEB 	      BL td3_memcopy               // Copia de ROM --> RAM 
  34              	
  35              	_Copia_Seccion_DATA:
  36              	      // Copiamos .data de LMA a VMA
  37 0014 1C009FE5 	      LDR R0, =_PUBLIC_VMA_SECTION_DATA     //Destino
  38 0018 1C109FE5 	      LDR R1, =_PUBLIC_LMA_SECTION_DATA     //origen
  39 001c 1C209FE5 	      LDR R2, =_PUBLIC_SIZE_DATA            //Cantidad de bytes
  40 0020 FEFFFFEB 	      BL td3_memcopy                        // Copia de ROM --> RAM 
  41              	
  42              	_Bootloader:
  43 0024 FEFFFFEA 	      B _start // salto a copia en RAM
  44              	
  45              	.section .text_Bootloader          // Sección de codigo.
  46              	
  47              	.arm
  48              	_Prueba:       ##Bootloader    // Símbolo que le indica al linker
  49              	                              //  donde arranca el programa.
  50 0000 0110A0E3 	      MOV R1, #1              
  51 0004 28209FE5 	      LDR R2, =argumento     
  52 0008 000092E5 	      LDR R0, [R2]
  53              	
  54              	_leer_ascii:
  55 000c 24C09FE5 	      LDR R12, =asciz_string      // Posicion del string
  56 0010 0000DCE5 	      LDRB R0, [R12]              // guardar 1er caracter
  57 0014 18309FE5 	      LDR R3, =argumento
ARM GAS  src/td3_memcopy.s 			page 2


  58 0018 0000C3E5 	      STRB R0, [R3]              // poner 1er caracter en argumento
  59              	
  60 001c 00009CE5 	      LDR R0, [R12]              // guardar string
  61 0020 14309FE5 	      LDR R3, =factorial
  62 0024 000083E5 	      STR R0, [R3]
  63              	
  64              	_prueba_stack:
  65 0028 04002DE5 	      PUSH {R0}
  66 002c 04009DE4 	      POP {R0}
  67              	
  68 0030 FEFFFFEA 	      B .
  69              	
  70              	// Seccion de datos inicializados
  71              	.section .data
  72              	asciz_string:
  73 0000 484F4C00 	    .asciz "HOL"
  74              	
  75 0004 04000000 	argumento: .word 4            // Argumento del factorial.
  76              	
  77              	
  78              	//.ascii "Hola Mundo"      // Sección de datos inicializados.
  79              	
  80              	// Seccion de datos no inicializados
  81              	.section .bss            // Sección de datos no inicializados.
  82 0000 00000000 	factorial: .space 4   // Reservar una palabra para guardar el factorial.
  83              	
  84              	     .section .stack
  85 0000 00000000 	pila: .space 4096             // Pila de 4KB
  85      00000000 
  85      00000000 
  85      00000000 
  85      00000000 
  86              	fin_pila:...
