ARM GAS  src/td3_memcopy-DESKTOP-SNH9GM6.s 			page 1


   1              	// Cálculo de factorial en binario usando una palabra.
   2              	// Hecho por Dario Alpern el 6 de abril de 2023.
   3              	.global _start
   4              	.global my_string
   5              	
   6              	.extern _PUBLIC_LMA_SECTION_INICIO
   7              	.extern _PUBLIC_VMA_SECTION_INICIO
   8              	.extern _PUBLIC_LMA_SECTION_TEXT
   9              	.extern _PUBLIC_VMA_SECTION_TEXT
  10              	.extern _PUBLIC_LMA_SECTION_DATA
  11              	.extern _PUBLIC_VMA_SECTION_DATA
  12              	
  13              	.extern _PUBLIC_SIZE_INICIO
  14              	.extern _PUBLIC_SIZE_TEXT
  15              	.extern _PUBLIC_SIZE_DATA
  16              	
  17              	.extern td3_memcopy
  18              	
  19              	.section .inicio
  20              	
  21              	_inicio_: 
  22              	
  23              	      // Copiamos .text (codigo) de LMA a VMA
  24 0000 1C009FE5 	      LDR R0, =_PUBLIC_VMA_SECTION_TEXT         //Destino
  25 0004 1C109FE5 	      LDR R1, =_PUBLIC_LMA_SECTION_TEXT         //origen
  26 0008 1C209FE5 	      LDR R2, =_PUBLIC_SIZE_TEXT                //Cantidad de bytes 
  27 000c FEFFFFEB 	      BL td3_memcopy
  28              	                                          // Ejecuto memcopy 
  29              	      // Copiamos .data de LMA a VMA
  30 0010 18009FE5 	      LDR R0, =_PUBLIC_VMA_SECTION_DATA         //Destino
  31 0014 18109FE5 	      LDR R1, =_PUBLIC_LMA_SECTION_DATA         //origen
  32 0018 18209FE5 	      LDR R2, =_PUBLIC_SIZE_DATA                //Cantidad de bytes
  33 001c FEFFFFEB 	      BL td3_memcopy                                   // Ejecuto memcopy 
  34 0020 FEFFFFEA 	      B _PUBLIC_VMA_SECTION_TEXT // salto a copia en RAM
  35              	
  36              	
  37              	.section .text          // Sección de còdigo.
  38              	
  39              	_start:       ##Bootloader    // Símbolo que le indica al linker
  40              	                              //  donde arranca el programa.
  41 0000 0110A0E3 	      MOV R1, #1              // Inicializar factorial.
  42 0004 44209FE5 	      LDR R2, =argumento      // Leer el argumento del factorial
  43 0008 000092E5 	      LDR R0, [R2]
  44              	_leer_ascii:
  45 000c 4020DFE5 	      LDRB R2, =asciz_string      // Leer el argumento del factorial
  46 0010 0100D2E4 	      LDRB R0, [R2], #1
  47 0014 34309FE5 	      LDR R3, =argumento
  48 0018 0000C3E5 	      STRB R0, [R3]
  49              	
  50 001c 0100D2E4 	      LDRB R0, [R2], #1
  51 0020 30309FE5 	      LDR R3, =factorial
  52 0024 0000C3E5 	      STRB R0, [R3]
  53              	
  54 0028 0100D2E4 	      LDRB R0, [R2], #1
  55 002c 24309FE5 	      LDR R3, =factorial
  56 0030 0000C3E5 	      STRB R0, [R3]
  57              	
ARM GAS  src/td3_memcopy-DESKTOP-SNH9GM6.s 			page 2


  58 0034 000050E3 	      CMP R0, #0
  59 0038 0300000A 	      BEQ factorial_calculado // No ejecutar ciclo si el argumento es cero.
  60              	ciclo_calculo_factorial:
  61 003c 910003E0 	      MUL R3, R1, R0          // R3 <- R1 * R0. El registro destino debe ser
  62              	                              // diferente que los registros fuente.
  63 0040 0310A0E1 	      MOV R1, R3              // Almacenar producto.
  64 0044 010050E2 	      SUBS R0, R0, #1         // Decrementar el argumento.
  65 0048 FBFFFF1A 	      BNE ciclo_calculo_factorial // Si no es cero, continuar ciclo.
  66              	factorial_calculado:
  67 004c FEFFFFEA 	      B .
  68              	
  69              	// Seccion de datos inicializados
  70              	.section .data
  71              	asciz_string:
  72 0000 486F6C00 	    .asciz "Hol"
  73              	
  74 0004 04000000 	argumento: .word 4            // Argumento del factorial.
  75              	
  76              	
  77              	//.ascii "Hola Mundo"      // Sección de datos inicializados.
  78              	
  79              	// Seccion de datos no inicializados
  80              	.section .bss            // Sección de datos no inicializados.
  81 0000 00000000 	factorial: .space 4   // Reservar una palabra para guardar el factorial....
ARM GAS  src/td3_memcopy-DESKTOP-SNH9GM6.s 			page 3


DEFINED SYMBOLS
src/td3_memcopy-DESKTOP-SNH9GM6.s:39     .text:0000000000000000 _start
src/td3_memcopy-DESKTOP-SNH9GM6.s:21     .inicio:0000000000000000 _inicio_
src/td3_memcopy-DESKTOP-SNH9GM6.s:24     .inicio:0000000000000000 $a
src/td3_memcopy-DESKTOP-SNH9GM6.s:41     .text:0000000000000000 $a
src/td3_memcopy-DESKTOP-SNH9GM6.s:74     .data:0000000000000004 argumento
src/td3_memcopy-DESKTOP-SNH9GM6.s:44     .text:000000000000000c _leer_ascii
src/td3_memcopy-DESKTOP-SNH9GM6.s:71     .data:0000000000000000 asciz_string
src/td3_memcopy-DESKTOP-SNH9GM6.s:81     .bss:0000000000000000 factorial
src/td3_memcopy-DESKTOP-SNH9GM6.s:66     .text:000000000000004c factorial_calculado
src/td3_memcopy-DESKTOP-SNH9GM6.s:60     .text:000000000000003c ciclo_calculo_factorial
src/td3_memcopy-DESKTOP-SNH9GM6.s:81     .bss:0000000000000000 $d
src/td3_memcopy-DESKTOP-SNH9GM6.s:81     .text:0000000000000050 $d
src/td3_memcopy-DESKTOP-SNH9GM6.s:81     .inicio:0000000000000024 $d

UNDEFINED SYMBOLS
my_string
_PUBLIC_VMA_SECTION_TEXT
_PUBLIC_LMA_SECTION_TEXT
_PUBLIC_SIZE_TEXT
td3_memcopy
_PUBLIC_VMA_SECTION_DATA
_PUBLIC_LMA_SECTION_DATA
_PUBLIC_SIZE_DATA
